<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tuodao.bp.common.persistence.mapper.basic.EmailLogMapper">
  <resultMap id="BaseResultMap" type="com.tuodao.bp.common.persistence.model.basic.EmailLog">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="email_from" jdbcType="VARCHAR" property="emailFrom" />
    <result column="email_to" jdbcType="VARCHAR" property="emailTo" />
    <result column="email_subject" jdbcType="VARCHAR" property="emailSubject" />
    <result column="result" jdbcType="VARCHAR" property="result" />
    <result column="gmt_create" jdbcType="TIMESTAMP" property="gmtCreate" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.tuodao.bp.common.persistence.model.basic.EmailLog">
    <result column="email_content" jdbcType="LONGVARCHAR" property="emailContent" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, email_from, email_to, email_subject, result, gmt_create
  </sql>
  <sql id="Blob_Column_List">
    email_content
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.tuodao.bp.common.persistence.model.basic.EmailLogExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from common_email_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.tuodao.bp.common.persistence.model.basic.EmailLogExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from common_email_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from common_email_log
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from common_email_log
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.tuodao.bp.common.persistence.model.basic.EmailLogExample">
    delete from common_email_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.tuodao.bp.common.persistence.model.basic.EmailLog">
    insert into common_email_log (id, email_from, email_to, 
      email_subject, result, gmt_create, 
      email_content)
    values (#{id,jdbcType=INTEGER}, #{emailFrom,jdbcType=VARCHAR}, #{emailTo,jdbcType=VARCHAR}, 
      #{emailSubject,jdbcType=VARCHAR}, #{result,jdbcType=VARCHAR}, #{gmtCreate,jdbcType=TIMESTAMP}, 
      #{emailContent,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.tuodao.bp.common.persistence.model.basic.EmailLog">
    insert into common_email_log
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="emailFrom != null">
        email_from,
      </if>
      <if test="emailTo != null">
        email_to,
      </if>
      <if test="emailSubject != null">
        email_subject,
      </if>
      <if test="result != null">
        result,
      </if>
      <if test="gmtCreate != null">
        gmt_create,
      </if>
      <if test="emailContent != null">
        email_content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="emailFrom != null">
        #{emailFrom,jdbcType=VARCHAR},
      </if>
      <if test="emailTo != null">
        #{emailTo,jdbcType=VARCHAR},
      </if>
      <if test="emailSubject != null">
        #{emailSubject,jdbcType=VARCHAR},
      </if>
      <if test="result != null">
        #{result,jdbcType=VARCHAR},
      </if>
      <if test="gmtCreate != null">
        #{gmtCreate,jdbcType=TIMESTAMP},
      </if>
      <if test="emailContent != null">
        #{emailContent,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.tuodao.bp.common.persistence.model.basic.EmailLogExample" resultType="java.lang.Integer">
    select count(*) from common_email_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update common_email_log
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.emailFrom != null">
        email_from = #{record.emailFrom,jdbcType=VARCHAR},
      </if>
      <if test="record.emailTo != null">
        email_to = #{record.emailTo,jdbcType=VARCHAR},
      </if>
      <if test="record.emailSubject != null">
        email_subject = #{record.emailSubject,jdbcType=VARCHAR},
      </if>
      <if test="record.result != null">
        result = #{record.result,jdbcType=VARCHAR},
      </if>
      <if test="record.gmtCreate != null">
        gmt_create = #{record.gmtCreate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.emailContent != null">
        email_content = #{record.emailContent,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update common_email_log
    set id = #{record.id,jdbcType=INTEGER},
      email_from = #{record.emailFrom,jdbcType=VARCHAR},
      email_to = #{record.emailTo,jdbcType=VARCHAR},
      email_subject = #{record.emailSubject,jdbcType=VARCHAR},
      result = #{record.result,jdbcType=VARCHAR},
      gmt_create = #{record.gmtCreate,jdbcType=TIMESTAMP},
      email_content = #{record.emailContent,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update common_email_log
    set id = #{record.id,jdbcType=INTEGER},
      email_from = #{record.emailFrom,jdbcType=VARCHAR},
      email_to = #{record.emailTo,jdbcType=VARCHAR},
      email_subject = #{record.emailSubject,jdbcType=VARCHAR},
      result = #{record.result,jdbcType=VARCHAR},
      gmt_create = #{record.gmtCreate,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.tuodao.bp.common.persistence.model.basic.EmailLog">
    update common_email_log
    <set>
      <if test="emailFrom != null">
        email_from = #{emailFrom,jdbcType=VARCHAR},
      </if>
      <if test="emailTo != null">
        email_to = #{emailTo,jdbcType=VARCHAR},
      </if>
      <if test="emailSubject != null">
        email_subject = #{emailSubject,jdbcType=VARCHAR},
      </if>
      <if test="result != null">
        result = #{result,jdbcType=VARCHAR},
      </if>
      <if test="gmtCreate != null">
        gmt_create = #{gmtCreate,jdbcType=TIMESTAMP},
      </if>
      <if test="emailContent != null">
        email_content = #{emailContent,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.tuodao.bp.common.persistence.model.basic.EmailLog">
    update common_email_log
    set email_from = #{emailFrom,jdbcType=VARCHAR},
      email_to = #{emailTo,jdbcType=VARCHAR},
      email_subject = #{emailSubject,jdbcType=VARCHAR},
      result = #{result,jdbcType=VARCHAR},
      gmt_create = #{gmtCreate,jdbcType=TIMESTAMP},
      email_content = #{emailContent,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.tuodao.bp.common.persistence.model.basic.EmailLog">
    update common_email_log
    set email_from = #{emailFrom,jdbcType=VARCHAR},
      email_to = #{emailTo,jdbcType=VARCHAR},
      email_subject = #{emailSubject,jdbcType=VARCHAR},
      result = #{result,jdbcType=VARCHAR},
      gmt_create = #{gmtCreate,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>